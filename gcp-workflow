name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        install_components: 'gke-gcloud-auth-plugin'
        export_default_credentials: true

    - name: Authenticate gcloud
      run: |
        # Authenticate using the service account and set the project ID
        gcloud auth activate-service-account --key-file=${{ secrets.GCP_SA_KEY }}
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      run: |
        docker-compose build --no-cache
        docker images
        docker tag fastapi-book-project-api:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-book-project:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-book-project:latest

    - name: Deploy to GCP VM
      run: |
        # Configure OS Login
        gcloud compute project-info add-metadata \
          --metadata enable-oslogin=TRUE

        # Get the instance's external IP
        INSTANCE_IP=$(gcloud compute instances describe ${{ secrets.GCP_VM_NAME }} \
          --zone=${{ secrets.GCP_ZONE }} \
          --format='get(networkInterfaces[0].accessConfigs[0].natIP)')

        # Use gcloud to execute commands on the VM
        gcloud compute ssh --quiet ${{ secrets.GCP_VM_NAME }} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --zone=${{ secrets.GCP_ZONE }} \
          --command='
            echo "Starting the deploy process on GCP VM..."
            
            # Update system packages
            sudo apt-get update
            
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Clone or pull repository
            if [ ! -d "~/fastapi-book-project" ]; then
              git clone https://github.com/citadelict/fastapi-book-project.git ~/fastapi-book-project
            else
              cd ~/fastapi-book-project && git pull origin main
            fi
            
            # Navigate to project directory
            cd ~/fastapi-book-project
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-book-project:latest
            
            # Stop existing containers
            docker-compose down
            
            # Start new containers
            docker-compose up -d
            
            # Verify deployment
            docker-compose ps
            
            # Clean up
            docker image prune -f
          
